//
// TestView.swift
// Generated by Core Animator version 1.3 on 04.02.16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class TestView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 59, height: 94))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:59, height:94)
		__scaling__.center = CGPoint(x:29.6, y:47.1)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let _1 = UIImageView()
		_1.bounds = CGRect(x:0, y:0, width:14.0, height:73.0)
		var img1: UIImage!
		if let imagePath = bundle.pathForResource("1.png", ofType:nil) {
			img1 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from '1.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		_1.image = img1
		_1.contentMode = .Center
		_1.layer.position = CGPoint(x:9.000, y:54.000)
		__scaling__.addSubview(_1)
		viewsByName["1"] = _1

		let _2 = UIImageView()
		_2.bounds = CGRect(x:0, y:0, width:15.0, height:81.0)
		var img2: UIImage!
		if let imagePath = bundle.pathForResource("2.png", ofType:nil) {
			img2 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from '2.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		_2.image = img2
		_2.contentMode = .Center
		_2.layer.position = CGPoint(x:28.000, y:50.000)
		__scaling__.addSubview(_2)
		viewsByName["2"] = _2

		let _3 = UIImageView()
		_3.bounds = CGRect(x:0, y:0, width:14.0, height:90.0)
		var img3: UIImage!
		if let imagePath = bundle.pathForResource("3.png", ofType:nil) {
			img3 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from '3.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		_3.image = img3
		_3.contentMode = .Center
		_3.layer.position = CGPoint(x:48.000, y:46.000)
		__scaling__.addSubview(_3)
		viewsByName["3"] = _3

		self.viewsByName = viewsByName
	}

	// - MARK: Untitled Animation

	func addUntitledAnimation() {
		addUntitledAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addUntitledAnimation(completion: ((Bool) -> Void)?) {
		addUntitledAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addUntitledAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addUntitledAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addUntitledAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addUntitledAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addUntitledAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "UntitledAnimation")
			self.animationCompletions[layer.animationForKey("UntitledAnimation")!] = complete
		}

		let _1OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		_1OpacityAnimation.duration = 0.500
		_1OpacityAnimation.values = [0.000 as Float, 1.000 as Float, 0.000 as Float, 0.000 as Float]
		_1OpacityAnimation.keyTimes = [0.000 as Float, 0.280 as Float, 0.640 as Float, 1.000 as Float]
		_1OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		_1OpacityAnimation.beginTime = beginTime
		_1OpacityAnimation.fillMode = fillMode
		_1OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["1"]?.layer.addAnimation(_1OpacityAnimation, forKey:"Untitled Animation_Opacity")

		let _2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		_2OpacityAnimation.duration = 0.500
		_2OpacityAnimation.values = [0.000 as Float, 0.000 as Float, 1.000 as Float, 0.000 as Float, 0.000 as Float]
		_2OpacityAnimation.keyTimes = [0.000 as Float, 0.180 as Float, 0.460 as Float, 0.820 as Float, 1.000 as Float]
		_2OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		_2OpacityAnimation.beginTime = beginTime
		_2OpacityAnimation.fillMode = fillMode
		_2OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["2"]?.layer.addAnimation(_2OpacityAnimation, forKey:"Untitled Animation_Opacity")

		let _3OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		_3OpacityAnimation.duration = 0.500
		_3OpacityAnimation.values = [0.000 as Float, 0.000 as Float, 1.000 as Float, 0.000 as Float]
		_3OpacityAnimation.keyTimes = [0.000 as Float, 0.280 as Float, 0.640 as Float, 1.000 as Float]
		_3OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		_3OpacityAnimation.beginTime = beginTime
		_3OpacityAnimation.fillMode = fillMode
		_3OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["3"]?.layer.addAnimation(_3OpacityAnimation, forKey:"Untitled Animation_Opacity")
	}

	func removeUntitledAnimation() {
		self.layer.removeAnimationForKey("UntitledAnimation")
		self.viewsByName["1"]?.layer.removeAnimationForKey("Untitled Animation_Opacity")
		self.viewsByName["2"]?.layer.removeAnimationForKey("Untitled Animation_Opacity")
		self.viewsByName["3"]?.layer.removeAnimationForKey("Untitled Animation_Opacity")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("UntitledAnimation")
	}
}